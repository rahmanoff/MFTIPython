# Алгоритмы на Python 3. Лекция №6
# Практика: http://judge.mipt.ru/mipt_cs_on_python3/
# Видео - https://www.youtube.com/watch?v=NLq7nB9bV0M
# Практика - https://github.com/mipt-cs/course-site-python3/wiki

# курс: Информатика. Алгоритмы и структуры данных на Python 3.
# лектор: Хирьянов Тимофей Фёдорович
# 10.10.2017

# Темы, рассмотренные на лекции №6:
# - Методы append(), pop() и функция len() для списка.
# - Списковые включения.
# - Мастер-класс по TDD.
# - Сортировка вставками.
# - Сортировка выбором.
# - Сортировка методом пузырька.
# - Сортировка подсчётом.

# Создание пустого массива
A = []
# Ввод элемента с клавиатуры
x = int(input())
# Добавляем элемент в массив
A.append(x)
# Узнаем количество хранимых элементов n, в масстве А
n = len(A)
# Удаление последнего элемента массива и передача его в переменную m
m = A.pop()

# List comprehensions - "создание" списков
A = [x**2 for x in range (10)]

# Перебор элементов массива при помощи for
А = [1,2,3,4,5,7,12,9,6]
for i in A:
    print(i)

# Создать массив В, который состоит из четных элементов массива А, возведенных в квадрат
А = [1,2,3,4,5,7,12,9,6]
B = []
for x in A:
    if x%2 == 0:
        B.append(x**2)
# или по-другому
B = [x**2 for x in A if x%2==0]

# Сортировки
#
# Квадратичные сортировки. Количество операций равно - O(N*N) (N в квадрате)
# 1.Сортировка вставками - Insert Sort - сравнение с отсортированной частью массива. ((N(N-1))/2)*k
# 2.Сортировка методом выбора - Choice Sort - сравнение с текущим макс или мин в массиве. (N*(N-1))/2
# 3.Сортировка методом пузырька - Bubble Sort - сравнение двух соседних. После первого прохода, 
# отсортированная часть массива оказывается в конце. (N*(N-1))/2

# Сортировка вставками
def insert_sort(A):
    """ Сортировка списка А вставками """
    N = len(A)
    for top in range(1, N):
        k = top
        while k > 0 and A[k-1] > A[k]: # Вторая часть выражения не будет просчитываться, если первая часть не True!
            A[k], A[k-1] = A[k-1], A[k]
            k-=1

# Сортировка выбором
def choice_sort(A):
    """ Сортировка списка А выбором """
    N = len(A)
    for pos in range(0, N-1):
        for k in range(pos+1, N):
            if A[k] < A[pos]:
                A[k], A[pos] = A[pos], A[k]

# Сортировка пузырьком
def bubble_sort(A):
    """ Сортировка списка А пузырьком """
    N = len(A)
    for bypass in range(1, N): # Количество проходов
        for k in range(0, N-bypass):
            if A[k] > A[k+1]:
                A[k], A[k+1] = A[k+1], A[k]

# Тестирование
def test_sort(sort_algorithm):
    print("Тестируем:", sort_algorithm.__doc__) # Вывод информации из документ-строки """ ... """
    print("Test Case #1:", end="") # Следующий print() будет выводится в этой же строке! Перехода на следующую строку не будет!
    A = [4,2,5,1,3]
    A_sorted = [1,2,3,4,5]
    sort_algorithm(A)
    print("Ok!" if A == A_sorted else "Fail!") # Тернарный условный оператор

    print("Test Case #2:", end="") # Следующий print() будет выводится в этой же строке! Перехода на следующую строку не будет!
    A = list(range(10,20)) + list(range(0,10)) # Создание списка при помощи range, список будет состоять из чисел от 10 до 19 и от 0 до 9
    A_sorted = list(range(20))
    sort_algorithm(A)
    print("Ok!" if A == A_sorted else "Fail!") # Тернарный условный оператор

    print("Test Case #3:", end="") # Следующий print() будет выводится в этой же строке! Перехода на следующую строку не будет!
    A = [4,2,4,2,1]
    A_sorted = [1,2,2,4,4]
    sort_algorithm(A)
    print("Ok!" if A == A_sorted else "Fail!") # Тернарный условный оператор

if __name__ == "__main__":
    test_sort(insert_sort)
    test_sort(choice_sort)
    test_sort(bubble_sort)

# Testing Drive Development - вначале тесты, потом функции

# 4.Сортировка подсчетом - Count Sort - Позволяет быстро сортировать большое количество данных. По времени O(N)
# Этот алгоритм однопроходный. Применяется если известно множество возможных значений входящих данных.
# Массив частот
N = 100 # Количество входящих посылок с данными
F = [0]*10  # Cоздаем массив из допустимых значений. В нашем случае значения могут быть от 0 до 9
for i in range(N):
    x = int(input())
    F[x]+=1
